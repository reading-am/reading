#-----------------------------------------
# TODO tests
# + test on page without jQuery
# + test on page with readers
# + test on page without /t/ and /p/
# + test on wrapped link logged out
# - check for empty title in window vs empty param
# - populate yep nope on create_find

#-----------------------------------------
# Libs
libs = {}

<%= IO.read "#{Rails.root}/app/assets/javascripts/libs/base58.coffee" %>
base58 = libs.encdec()

#-----------------------------------------
# Config Vars

domain = "<%= DOMAIN %>"
short_domain = "<%= SHORT_DOMAIN %>"
win_focus = true
on_reading = window.location.host.indexOf("reading.am") is 0 or
             window.location.host.indexOf("staging.reading.am") is 0 or
             window.location.host.indexOf("0.0.0.0") is 0

#-----------------------------------------
# Helpers

parse_url = ->
  url = window.location.href.split(window.location.host)[1].substring(1)
  while url.substring(0, 2) is 't/' or url.substring(0, 2) is 'p/'
    url = url.substring(url.indexOf('/', 2) + 1)
  url = "http://#{url}" if url.indexOf('://') is -1
  url

popup = (url, width, height) ->
  window.open url, "r_win", "location=0,toolbars=0,status=0,directories=0,menubar=0,resizable=0,width=#{width},height=#{height}"

#-----------------------------------------
# var params comes in from the outside world as var reading

url         = if on_reading then parse_url() else window.location.href
title       = if on_reading then null else window.document.title
token       = reading.token ? null
platform    = reading.platform ? "bookmarklet"
referrer_id = reading.referrer_id ? 0

#-----------------------------------------
# Classes

class Post
  constructor: (p) ->
    @id = p.id
    @yn = p.yn
    @updated_at = new Date
    @loading = false
  short_url: ->
    "#{short_domain}/p/#{base58.encode(@id)}"
  save: (success) ->
    @loading = new Date
    data =
      post: # the id is passed in the url
        yn: @yn
    data.token = token if token
    $.ajax
      url: "http://#{domain}/posts/#{@id}/update.json"
      dataType: "jsonp"
      data: data
      success: (data, textStatus, jqXHR) =>
        @loading = false
        if data.meta.status isnt 400
          @updated_at = new Date
          success data.response if success
  touch: (success) ->
    @save success

Post::find_or_create = (data, success) ->
  data.token = token if token
  # don't send the null title or else it'll get posted
  delete data.title if title is null
  $.ajax
    url: "http://#{domain}/posts/create.json"
    dataType: "jsonp"
    data: data
    success: (data, textStatus, jqXHR) ->
      if data.meta.status is 400
        alert "Sorry, an error prevented this page from being posted to Reading"
      else if success
        data.response.post = new Post data.response.post
        success data.response

class Provider
  constructor: (p) ->
    @name = p.name
    @url_scheme = p.url_scheme
    @action = p.action
  url: (post) ->
    vals =
      url: url
      short_url: "http://#{post.short_url()}"
      title: title
    parsed_url = @url_scheme
    for val of vals
      parsed_url = parsed_url.replace("{#{val}}", encodeURIComponent(vals[val]))
    parsed_url
  run: (post) ->
    @action @url post

#-----------------------------------------
# Vars

providers = [
  new Provider
    name: "Twitter"
    url_scheme: "https://twitter.com/share?url={short_url}&text=âœŒ%20Reading%20%22{title}%22"
    action: (url) ->
      popup url, 475, 345
  new Provider
    name: "Facebook"
    url_scheme: "https://www.facebook.com/sharer.php?u={short_url}&t={title}"
    action: (url) ->
      popup url, 520, 370
  new Provider
    name: "Instapaper"
    url_scheme: "http://www.instapaper.com/hello2?url={url}&title={title}"
    action: (url) ->
      window.location = url
  new Provider
    name: "Readability"
    url_scheme: "http://www.readability.com/save?url={url}"
    action: (url) ->
      window.location = url
  new Provider
    name: "Read It Later"
    url_scheme: "https://readitlaterlist.com/save?url={url}&title={title}"
    action: (url) ->
      popup url, 490, 400
]

#-----------------------------------------
# Renderer for yellow popover

render = (post, readers = false) ->
  readers   = false if readers.length is 0

  $reading  = $('<%= IO.read("#{Rails.root}/app/views/bookmarklet/loader.html").gsub(/\n/,"") %>')
  $icon     = $("#r_icon", $reading)
  $actions  = $("#r_actions", $reading)
  $wrapper  = $("#r_wrp", $reading)
  $stuff    = $("#r_stuff_menu", $reading)
  $readers  = $("#r_readers", $reading)

  if readers
    $.each readers, (i, user) ->
      $readers.append "<li><a href=\"http://#{domain}/#{user.username}\">#{user.display_name}</a></li>"

  $('body').prepend $reading
  $('#r_preloader').fadeOut(500, -> $(this).remove())
  $reading.fadeIn 500, ->
    $wrapper.delay(1000).animate
      height: "14px"
      width: $actions.width()

    $icon.delay(1000).animate 'margin-top': '-52px'
    $readers.delay(1200).slideDown()  if readers

  $('#r_close').click ->
    $reading.fadeOut 400, ->
      $reading.remove()
    false

  $('#r_yep, #r_nope').click ->
    $this = $(this)
    $close = $('#r_close')
    i = 0
    shapes = ['&#10043;', '&#10044;', '&#10045;', '&#10046;']
    loading = setInterval(->
      $close.html shapes[i]
      i = (if i < shapes.length - 1 then i + 1 else 0)
    , 250)
    post.yn = $this.is('#r_yep')
    $other = (if post.yn then $('#r_nope') else $('#r_yep'))
    $other.removeClass('r_active').addClass 'r_inactive'
    $this.removeClass('r_inactive').addClass 'r_active'
    post.save ->
      clearInterval loading
      $close.html '&#10005;'
    false

  show_stuff = ->
    $stuff.show()
    $readers.hide() if readers
    $('#r_stuff').addClass "r_active"
    false

  hide_stuff = ->
    $stuff.hide()
    $readers.show() if readers
    $('#r_stuff').removeClass "r_active"
    false

  i = 0
  while i < providers.length
    $stuff.append "<li><a href=\"#\" class=\"r_share\" data-provider_id=\"#{i}\">#{providers[i].name}</a></li>"
    i++
  $reading.append $stuff
  $('#r_stuff').mouseenter(->
    show_stuff()
  ).click ->
    false

  $reading.mouseleave ->
    hide_stuff()

  $('a:not(#r_stuff)', $actions).mouseenter ->
    hide_stuff()

  $('.r_share', $reading).click ->
    provider = providers[$(this).attr('data-provider_id')]
    provider.run post
    false

  $(window).scroll ->
    $('#r_close').click() if $actions.find('#r_yep.r_active, #r_nope.r_active').length


#-----------------------------------------
# Script Loader

load_script = (url, success) ->
  script = document.createElement('script')
  script.src = url
  head = document.getElementsByTagName('head')[0]
  done = false
  script.onload = script.onreadystatechange = =>
    if not done and (not @readyState or @readyState is 'loaded' or @readyState is 'complete')
      done = true
      success()
      script.onload = script.onreadystatechange = null
      head.removeChild script
  head.appendChild script

#-----------------------------------------
# Initialize!

init = ->
  return window.location = url if (token is "-" or (on_reading and not token))

  $css = $('<style type="text/css">').html('<%= IO.read("#{Rails.root}/app/assets/stylesheets/bookmarklet/loader.css").gsub(/\n/,"") %>').appendTo('head')
  $("<div id=\"r_preloader\">&#9996; Loading</div>").appendTo('body').fadeIn(200)

  Post::find_or_create {url: url, title: title, referrer_id: referrer_id}, (data) ->
    if on_reading
      # forward back through to Reading so that the user's
      # token doesn't show up in the referrer
      window.location = if window.location.href.indexOf('/t/') > -1 then "http://#{domain}/t/-/#{url}" else url
    else
      post = data.post
      readers = data.readers
      # update the date_created every 15 seconds ala chartbeat
      setInterval (->
        post.touch() if win_focus and not post.loading and new Date - post.updated_at >= 15000
      ), 2500
      # show yellow box
      render post, readers

      $(window).focus(->
        win_focus = true
      ).blur(->
        win_focus = false
      )

#-----------------------------------------
# Check for jQuery and initialize

if jQuery? and jQuery().jquery? and jQuery().jquery >= "1.5"
  $ = jQuery
  init()
else
  load_script 'http://code.jquery.com/jquery-latest.min.js', ->
    if typeof jQuery is 'undefined'
      alert 'There was an error loading Reading'
    else
      $ = jQuery
      $.noConflict()
      init()

