<% include_path = "#{Rails.root}/app/assets/javascripts/views/hooks" %>
<%= ERB.new(IO.read "#{include_path}/properties.coffee.erb").result %>
<%= ERB.new(IO.read "#{include_path}/builders.coffee.erb").result %>
<%= ERB.new(IO.read "#{include_path}/serializers.coffee.erb").result %>

# endpoints to get user data from each provider
api_urls =
  twitter: "https://api.twitter.com/1/users/show.json?id="
  facebook: "https://graph.facebook.com/"

# replace external account ids with their usernames
populate_accounts = (provider, selection) ->
  selection.each ->
    $this = $(this)
    $.ajax
      url: api_urls[provider] + $this.text()
      dataType: "jsonp"
      success: (r) ->
        if r.screen_name
          $this.text (if provider is "twitter" then "@" else "") + r.screen_name
        else if r.username
          $this.text r.username
        else $this.text r.name  if r.name

$ ->
  # build the constructor with the initial selection
  $con = $('#constructor')
  $(".wrapper", $con)
    .append("When I ").append(field({text: "events", options: hook_properties.events}, "hook", false))
    .append(" please post to the ").append(field({text: "provider", options: hook_properties.providers}, "hook", false))
    .append "<span id=\"provider_params\">"

  # switch out and link the footnotes explaining a hook
  $("select[name='hook[provider]']", $con).change(->
    $this = $(this)
    $(".footnote").data "url", "/footnotes/" + $this.val()
    $("#provider_params").replaceWith build_provider(hook_properties.providers[$this.prop("selectedIndex")])
  ).change()

  # populate the auth spans with real usernames
  populate_accounts "twitter", $(".provider.twitter .account")
  populate_accounts "facebook", $(".provider.facebook .account")

  cpath = {path: "/"}

  #########################
  # Process New Hook Form #
  #########################
  $("#new_hook").on "submit", ->
    $this       = $(this)
    $submit     = $this.find(":submit")
    provider    = $("#hook_provider", $this).val()
    account     = $("#hook_params_account", $this).val()
    permission  = $("#hook_params_permission", $this).val()

    # loading state
    $this.addClass "loading"
    prev_val = $submit.val()
    $submit.val("Saving...")

    if account
      if account is "new"
        auth = new window["#{provider[0].toUpperCase()}#{provider[1..]}Auth"](account)
      else
        auth = current_user.authorizations[provider][account]

      if not auth.can permission
        auth.ask permission, (response) =>
          if account is "new"
            $("#hook_params_account option[value='new']").val auth.uid
          $this.submit()
        , (response) =>
          if account is "new" and auth.uid isnt "new"
            # user approved some of the auth but not the write permission
            $("#hook_params_account option[value='new']").val auth.uid
          alert errors[response.status] ? errors.generic
          # remove loading state
          $this.removeClass "loading"
          $submit.val prev_val

        false # stop submit
